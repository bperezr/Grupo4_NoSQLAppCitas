//use mediConnect;

//----------------------------------------Crear colecion de Especialidades
db.createCollection("Especialidades", {
    validator: {
        $jsonSchema: {
            bsonType: "object",
            required: ["nombreEspecialidad", "precioConsulta"],
            properties: {
                nombreEspecialidad: { bsonType: "string" },
                descripcion: { bsonType: "string" },
                precioConsulta: { bsonType: ["double", "int"] }
            }
        }
    },
    validationAction: "error"
});

db.Especialidades.createIndex({ nombreEspecialidad: 1 }, { unique: true });

//----------------------------------------Crear colecion de Sucursales
db.createCollection("Sucursales", {
    validator: {
        $jsonSchema: {
            bsonType: "object",
            required: ["nombre", "direccion", "telefono"],
            properties: {
                nombre: { bsonType: "string" },
                direccion: { bsonType: "string" },
                telefono: { bsonType: "string" },
                estado: { bsonType: "string", enum: ["activo", "inactivo"] }
            }
        }
    },
    validationAction: "error"
});

db.Sucursales.createIndex({ nombre: 1 });

//----------------------------------------Crear colecion de usuarios
db.createCollection("Usuarios", {
    validator: {
        $jsonSchema: {
            bsonType: "object",
            required: ["email", "contraseña", "rol", "estado"],
            properties: {
                email: { bsonType: "string", pattern: "^.+@.+\..+$", description: "Debe ser un correo válido" },
                contraseña: { bsonType: "string", minLength: 8, description: "Debe tener al menos 8 caracteres" },
                rol: { bsonType: "string", enum: ["paciente", "doctor", "admin"], description: "Rol del usuario" },
                estado: { bsonType: "string", enum: ["activo", "inactivo"] },
                reinicioContraseña: { bsonType: "bool", description: "Indica si el usuario debe reiniciar su contraseña" }
            }
        }
    },
    validationAction: "error"
});

db.Usuarios.createIndex({ email: 1 }, { unique: true });
db.Usuarios.createIndex({ rol: 1 });
db.Usuarios.createIndex({ estado: 1 });

//----------------------------------------Crear colecion de doctores
db.createCollection("Doctores", {
    validator: {
        $jsonSchema: {
            bsonType: "object",
            required: ["nombre", "apellidos", "email", "estado", "especialidadId", "sucursalId", "usuarioId"],
            properties: {
                nombre: { bsonType: "string" },
                apellidos: { bsonType: "string" },
                email: { bsonType: "string", pattern: "^.+@.+\\..+$" },
                telefono: { bsonType: "string" },
                especialidadId: {
                    bsonType: "array",
                    items: { bsonType: "objectId" }
                },
                sucursalId: { bsonType: "objectId" },
                usuarioId: { bsonType: "objectId" },
                estado: { bsonType: "string", enum: ["activo", "inactivo"] }
            }
        }
    },
    validationAction: "error"
})

db.Doctores.createIndex({ email: 1 }, { unique: true });
db.Doctores.createIndex({ especialidadId: 1 });
db.Doctores.createIndex({ sucursalId: 1 });
db.Doctores.createIndex({ usuarioId: 1 });

//----------------------------------------Crear colecion de Pacientes
db.createCollection("Pacientes", {
    validator: {
        $jsonSchema: {
            bsonType: "object",
            required: ["cedula", "nombre", "apellido", "email", "telefono"],
            properties: {
                cedula: { bsonType: "string", description: "Debe ser una cédula válida" },
                nombre: { bsonType: "string" },
                apellido: { bsonType: "string" },
                email: {
                    bsonType: "string",
                    pattern: "^.+@.+\\..+$",
                    description: "Debe ser un correo válido"
                },
                telefono: { bsonType: "string" },
                direccion: { bsonType: "string" },
                fechaNacimiento: { bsonType: "date" },
                historialMedico: { bsonType: "string" }
            }
        }
    },
    validationAction: "error"
});


db.Pacientes.createIndex({ cedula: 1 }, { unique: true });
db.Pacientes.createIndex({ email: 1 }, { unique: true });
db.Pacientes.createIndex({ telefono: 1 }); // No es único

//----------------------------------------Crear colecion de Citas
db.createCollection("Citas", {
  validator: {
    $jsonSchema: {
      bsonType: "object",
      required: ["pacienteId", "doctorId", "fechaHora", "estado", "especialidadId"],
      properties: {
        pacienteId: { bsonType: "objectId" },
        doctorId: { bsonType: "objectId" },
        especialidadId: { bsonType: "objectId" },
        fechaHora: { bsonType: "date" },
        estado: {
          bsonType: "string",
          enum: ["pendiente", "confirmada", "cancelada", "completada"]
        },
        motivo: { bsonType: "string" },
        notas: { bsonType: "string" }
      }
    }
  },
  validationAction: "error"
});

db.Citas.createIndex({ especialidadId: 1 });
db.Citas.createIndex({ pacienteId: 1 });
db.Citas.createIndex({ doctorId: 1 });
db.Citas.createIndex({ fechaHora: 1 });
db.Citas.createIndex({ estado: 1 });

db.createCollection("Especialidades", {
    validator: {
        $jsonSchema: {
            bsonType: "object",
            required: ["nombreEspecialidad", "precioConsulta"],
            properties: {
                nombreEspecialidad: { bsonType: "string" },
                descripcion: { bsonType: "string" },
                precioConsulta: { bsonType: "double" }
//----------------------------------------Crear colecion de Recetas
db.createCollection("Recetas", {
    validator: {
        $jsonSchema: {
            bsonType: "object",
            required: ["pacienteId", "doctorId", "medicamentos", "indicaciones", "fechaEmision"],
            properties: {
                pacienteId: { bsonType: "objectId" },
                doctorId: { bsonType: "objectId" },
                medicamentos: { bsonType: "array", items: { bsonType: "string" } },
                indicaciones: { bsonType: "string" },
                fechaEmision: { bsonType: "date" }
            }
        }
    },
    validationAction: "error"
});

db.Especialidades.createIndex({ nombreEspecialidad: 1 }, { unique: true });

db.createCollection("Doctores", {
    validator: {
        $jsonSchema: {
            bsonType: "object",
            required: ["nombre", "apellido", "email", "especialidad", "estado"],
            properties: {
                nombre: { bsonType: "string" },
                apellido: { bsonType: "string" },
                email: { bsonType: "string", pattern: "^.+@.+\..+$" },
                especialidad: { bsonType: "string" },
                horarioAtencion: { bsonType: "string" },
                sucursalId: { bsonType: "objectId" },
                estado: { bsonType: "string", enum: ["activo", "inactivo"] }
            }
        }
    },
    validationAction: "error"
});

db.Doctores.createIndex({ email: 1 }, { unique: true });
db.Doctores.createIndex({ especialidad: 1 });
db.Doctores.createIndex({ sucursalId: 1 });

db.Recetas.createIndex({ pacienteId: 1 });
db.Recetas.createIndex({ doctorId: 1 });

//----------------------------------------Crear colecion de Historial de Citas
db.createCollection("HistorialCitas", {
    validator: {
        $jsonSchema: {
            bsonType: "object",
            required: ["citaId", "modificadoPor", "fechaModificacion", "cambioRealizado"],
            properties: {
                citaId: { bsonType: "objectId" },
                modificadoPor: { bsonType: "objectId" },
                fechaModificacion: { bsonType: "date" },
                cambioRealizado: { bsonType: "string" }
            }
        }
    },
    validationAction: "error"
});

db.HistorialCitas.createIndex({ citaId: 1 });
db.HistorialCitas.createIndex({ modificadoPor: 1 });


//----------------------------------------Crear colecion de Horarios no Disponibles

db.createCollection("HorariosNodisponibles", {
  validator: {
    $jsonSchema: {
      bsonType: "object",
      required: ["doctorId", "fecha", "horaInicio", "horaFin", "detalle", "fechaCreacion"],
      properties: {
        doctorId: {
          bsonType: "objectId",
          description: "Debe ser un ObjectId válido del doctor"
        },
        fecha: {
          bsonType: "string",
          description: "Fecha en formato YYYY-MM-DD"
        },
        horaInicio: {
          bsonType: "string",
          description: "Hora de inicio en formato HH:mm"
        },
        horaFin: {
          bsonType: "string",
          description: "Hora de fin en formato HH:mm"
        },
        detalle: {
          bsonType: ["string", "null"],
          description: "Motivo del bloqueo (opcional)"
        },
        fechaCreacion: {
          bsonType: "date",
          description: "Fecha de creación del registro"
        }
      }
    }
  }
});


db.HorariosNodisponibles.createIndex({ doctorId: 1, fecha: 1 });

//----------------------------------------Crear colecion de Pagos
db.createCollection("Pagos", {
    validator: {
        $jsonSchema: {
            bsonType: "object",
            required: ["citaId", "pacienteId", "monto", "fechaPago", "estado"],
            properties: {
                citaId: { bsonType: "objectId" },
                pacienteId: { bsonType: "objectId" },
                monto: { bsonType: "double" },
                fechaPago: { bsonType: "date" },
                estado: { bsonType: "string", enum: ["pendiente", "pagado", "cancelado"] }
            }
        }
    },
    validationAction: "error"
});

db.Pagos.createIndex({ citaId: 1 });
db.Pagos.createIndex({ pacienteId: 1 });
db.Pagos.createIndex({ estado: 1 });

//----------------------------------------Crear colecion de Notificaciones
db.createCollection("Notificaciones", {
    validator: {
        $jsonSchema: {
            bsonType: "object",
            required: ["usuarioId", "mensaje", "tipo", "fechaEnvio", "leido"],
            properties: {
                usuarioId: { bsonType: "objectId" },
                mensaje: { bsonType: "string" },
                tipo: { bsonType: "string" },
                fechaEnvio: { bsonType: "date" },
                leido: { bsonType: "bool" }
            }
        }
    },
    validationAction: "error"
});

db.Notificaciones.createIndex({ usuarioId: 1, leido: 1 });

//----------------------------------------Crear colecion de Bitacora de Uso
db.createCollection("BitacoraUso", {
    validator: {
        $jsonSchema: {
            bsonType: "object",
            required: ["usuarioId", "fechaHora", "tipoAccion"],
            properties: {
                usuarioId: { bsonType: "objectId" },
                fechaHora: { bsonType: "date" },
                tipoAccion: { bsonType: "string" }
            }
        }
    },
    validationAction: "error"
});

db.BitacoraUso.createIndex({ usuarioId: 1 });
db.BitacoraUso.createIndex({ fechaHora: -1 });


// Medicamentos
db.createCollection("medicamentos", {
  validator: {
    $jsonSchema: {
      bsonType: "object",
      required: ["nombre", "marca", "tipo", "stock", "unidad", "fechaIngreso", "activo"],
      properties: {
        nombre: {
          bsonType: "string",
          description: "El nombre del medicamento es obligatorio y debe ser una cadena."
        },
        marca: {
          bsonType: "string",
          description: "La marca es obligatoria."
        },
        tipo: {
          bsonType: "string",
          description: "El tipo (categoría) del medicamento es obligatorio."
        },
        stock: {
          bsonType: "int",
          minimum: 0,
          description: "El stock disponible debe ser un entero igual o mayor a 0."
        },
        unidad: {
          bsonType: "string",
          description: "La unidad de medida (p.ej. mg, ml) es obligatoria."
        },
        fechaIngreso: {
          bsonType: "date",
          description: "La fecha de ingreso al inventario es obligatoria."
        },
        activo: {
          bsonType: "bool",
          description: "Indica si el medicamento está activo (true o false)."
        }
      }
    }
  },
  validationLevel: "strict",
  validationAction: "error"
});

//Recetas
db.createCollection("Recetas", {
  validator: {
    $jsonSchema: {
      bsonType: "object",
      required: ["pacienteId", "doctorId", "sucursalId", "fechaEntrega", "estado", "medicamentos"],
      properties: {
        pacienteId: {
          bsonType: "objectId",
          description: "Referencia al ID del paciente es obligatoria."
        },
        doctorId: {
          bsonType: "objectId",
          description: "Referencia al ID del doctor es obligatoria."
        },
        sucursalId: {
          bsonType: "objectId",
          description: "Referencia al ID de la sucursal de entrega es obligatoria."
        },
        fechaEntrega: {
          bsonType: "date",
          description: "La fecha de entrega de la receta es obligatoria."
        },
        estado: {
          bsonType: "string",
          enum: ["Pendiente", "Entregado","Cancelado"],
          description: "El estado debe ser uno de: Pendiente, Entregado, Cancelado."
        },
        medicamentos: {
          bsonType: "array",
          description: "Arreglo de medicamentos asociados a la receta.",
          items: {
            bsonType: "object",
            required: ["medicamentoId", "cantidad"],
            properties: {
              medicamentoId: {
                bsonType: "objectId",
                description: "Referencia al medicamento."
              },
              cantidad: {
                bsonType: "int",
                minimum: 1,
                description: "La cantidad debe ser un entero mayor o igual a 1."
              }
            }
          }
        },
        notas: {
          bsonType: "string",
          description: "Campo opcional para observaciones adicionales."
        }
      }
    }
  },
  validationLevel: "strict",
  validationAction: "error"
});

// Entregas
db.createCollection("Entregas", {
  validator: {
    $jsonSchema: {
      bsonType: "object",
      required: ["recetaId", "medicamentoId", "cantidadEntregada", "fechaEntrega", "entregadoPor"],
      properties: {
        recetaId: {
          bsonType: "objectId",
          description: "Referencia a la receta asociada es obligatoria."
        },
        medicamentoId: {
          bsonType: "objectId",
          description: "Referencia al medicamento entregado es obligatoria."
        },
        cantidadEntregada: {
          bsonType: "int",
          minimum: 1,
          description: "Cantidad entregada, debe ser un entero mayor o igual a 1."
        },
        fechaEntrega: {
          bsonType: "date",
          description: "La fecha en la que se realizó la entrega es obligatoria."
        },
        entregadoPor: {
          bsonType: "objectId",
          description: "Referencia al usuario que realizó la entrega es obligatoria."
        }
      }
    }
  },
  validationLevel: "strict",
  validationAction: "error"
});
//

db.createCollection("Farmaceuticos", {
  validator: {
    $jsonSchema: {
      bsonType: "object",
      required: ["nombre", "apellidos", "email", "usuarioId", "sucursalId", "estado"],
      properties: {
        nombre: {
          bsonType: "string",
          description: "Nombre del farmacéutico, requerido"
        },
        apellidos: {
          bsonType: "string",
          description: "Apellidos del farmacéutico, requerido"
        },
        email: {
          bsonType: "string",
          pattern: "^.+@.+\\..+$",
          description: "Correo electrónico válido, requerido"
        },
        telefono: {
          bsonType: "string",
          description: "Teléfono del farmacéutico (opcional)"
        },
        usuarioId: {
          bsonType: "objectId",
          description: "Referencia al usuario del sistema, requerido"
        },
        sucursalId: {
          bsonType: "objectId",
          description: "Referencia a la sucursal, requerido"
        },
        estado: {
          enum: ["activo", "inactivo"],
          description: "Estado del farmacéutico (activo/inactivo)"
        }
      }
    }
  }
})

db.Farmaceuticos.createIndex({ email: 1 }, { unique: true })
db.Farmaceuticos.createIndex({ usuarioId: 1 })
db.Farmaceuticos.createIndex({ sucursalId: 1 })

